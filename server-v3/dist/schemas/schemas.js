"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _apolloServerExpress = require("apollo-server-express");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  scalar Date\n  # enum EnumCategory {\n  #   GENERAL\n  #   GIT\n  #   BOOK\n  # }\n\n  enum EnumLinkedStore {\n    KYOBO\n    YES24\n  }\n\n  enum EnumUserType {\n    KAKAO\n    GIT\n    GOOGLE\n    ADMIN\n  }\n\n  enum EnumLevel {\n    VISITOR\n    MEMBER\n    WRITER\n    MANAGER\n  }\n\n  enum EnumFileType {\n    EXT_IMG\n    LOCAL_IMG\n    EXT_FILE\n    LOCAL_FILE\n    ETC\n  }\n\n  type Content {\n    id: ID!\n    linkedPost: Post!\n    language: String\n    content: String!\n    isDraft: Boolean\n    createdAt: Date\n    updatedAt: Date\n  }\n\n  type Post {\n    title: String!\n    subtitle: String\n    postType: String\n    languages: String\n    author: User!\n    series: [Series]\n    topics: [Topic]\n    scrappedUsers: [User]\n    thumbnail: Image\n    keywords: String\n    summary: String\n    numViews: Int\n    numLikes: Int\n    numComments: Int\n    isPrivate: Boolean\n    publishedAt: Date!\n    deprecatedAt: Date\n    createdAt: Date\n    updatedAt: Date\n  }\n\n  type GeneralPost {\n    title: String!\n    contributions: [Contribution]\n    lastContent: Content!\n    comments: [Comment]\n    contentFiles: [File]\n  }\n\n  type BookPost {\n    title: String!\n    contributions: [Contribution]\n    lastContent: Content!\n    comments: [Comment]\n    contentFiles: [File]\n    bookName: String!\n    bookPublisher: String!\n    bookPrice: String\n    bookDescription: String\n    bookUrl: String\n    linkedStore: String\n  }\n\n  type GitPost {\n    gitRepoName: String\n    gitRepoUrl: String!\n    gitAuthor: String\n    mainImage: File\n  }\n\n  type Contribution {\n    id: ID!\n    linkedPostTitle: String!\n    contributorName: String!\n    contributor: User\n    type: String!\n    description: String\n    createdAt: Date\n    updatedAt: Date\n  }\n\n  interface Like {\n    id: ID!\n    user: User!\n    createdAt: Date\n    updatedAt: Date\n  }\n\n  type PostLike implements Like {\n    id: ID!\n    user: User!\n    createdAt: Date\n    updatedAt: Date\n    linkedPost: Post!\n  }\n\n  type CommentLike implements Like {\n    id: ID!\n    user: User!\n    createdAt: Date\n    updatedAt: Date\n    linkedComment: Comment!\n  }\n\n  type Comment {\n    id: ID!\n    linkedPost: Post!\n    content: String!\n    author: User!\n    isReply: Boolean!\n    numLikes: Int!\n    createdAt: Date\n    updatedAt: Date\n  }\n\n  # NOTE: openId is private\n  # type OpenId {\n  #   id: ID!\n  #   idType: String!\n  #   linkedUserId: ID!\n  #   memo: String\n  #   createdAt: Date\n  #   updatedAt: Date\n  # }\n\n  type User {\n    id: ID!\n    email: String!\n    subscribeEmail: Boolean\n    name: String\n    alias: String\n    isStashed: Boolean\n    stasher: User\n    stashedDate: Date\n    profileImage: File\n    profileMessage: String\n    initialLetter: String\n    isHeavyUser: Boolean\n    level: EnumLevel\n    writtenPosts: [Post]\n    scrappedPosts: [Post]\n    comments: [Comment]\n    contributions: [Contribution]\n    createdAt: Date\n    updatedAt: Date\n  }\n\n  type File {\n    id: ID!\n    uploader: User!\n    alias: String!\n    fileType: EnumFileType\n    url: String!\n    imageInfo: Image\n    linkedBookPost: BookPost\n    linkedGeneralPost: GeneralPost\n    # TODO: decide whether to make linkedGitPost\n    createdAt: Date\n    updatedAt: Date\n  }\n\n  type Image {\n    id: ID!\n    hasInfo: Boolean\n    size: String\n    width: String\n    height: String\n    color: String\n    tags: String\n    raw: String\n    full: String\n    regular: String\n    small: String\n    thumb: String\n    copyright: String!\n    createdAt: Date\n    updatedAt: Date\n  }\n\n  type Series {\n    title: String!\n    posts: [Post]\n    topics: [Topic]\n    description: String!\n    numViews: Int\n    numLikes: Int\n    createdAt: Date\n    updatedAt: Date\n  }\n\n  type Topic {\n    name: String!\n    posts: [Post]\n    coverImage: File\n    coverDescription: String\n    numViews: Int\n    events: [Event]\n    series: [Series]\n    backImage: File\n    icon: File\n    createdAt: Date\n    updatedAt: Date\n  }\n\n  type Event {\n    id: ID!\n    name: String!\n    description: String!\n    mainImage: File\n    topics: [Topic]\n    publishedAt: String\n    deprecatedAt: String\n    createdAt: Date\n    updatedAt: Date\n  }\n\n  type QueryTopicResponse {\n    success: Boolean!\n    message: String\n    topic: Topic\n  }\n\n  type QueryTopicListResponse {\n    success: Boolean!\n    message: String\n    topics: [Topic]!\n  }\n\n  type QueryPostResponse {\n    success: Boolean!\n    message: String\n    post: Post\n    posts: [Post]\n  }\n\n  type QueryGeneralPostResponse {\n    success: Boolean!\n    message: String\n    post: GeneralPost\n  }\n\n  type QueryUserResponse {\n    success: Boolean!\n    message: String\n    user: User\n    users: [User]\n  }\n\n  type QuerySignUpResponse {\n    success: Boolean!\n    message: String\n    accessToken: String\n    alias: String\n    email: String\n  }\n\n  type QueryLoginResponse {\n    success: Boolean!\n    message: String\n    isUser: Boolean!\n    accessToken: String\n    refreshToken: String\n    user: User\n    openIdId: String\n    openIdAlias: String\n    openIdEmail: String\n  }\n\n  type QueryYesNoResponse {\n    success: Boolean!\n    available: Boolean!\n  }\n\n  type QueryDBResponse {\n    message: String\n    success: Boolean!\n    data: String\n  }\n\n  type QueryImageResponse {\n    success: Boolean!\n    message: String\n    file: File\n  }\n\n  type Query {\n    # getUsers: [User]\n    getTopicList: QueryTopicListResponse\n    getTopic(name: String!, language: String): QueryTopicResponse\n    getWrittenPosts(topic: String): QueryPostResponse\n    getGeneralPost(title: String!): QueryGeneralPostResponse\n    getUsers: QueryUserResponse\n    getUserInfo: QueryUserResponse\n    getImage(id: String!): QueryImageResponse\n    getData(type: String): QueryDBResponse\n    # signUpWithGithub(code: String!, state: String!): QuerySignUpResponse\n    # loginWithGithub(code: String!): QueryLoginResponse\n    checkPostTitle(title: String!): QueryYesNoResponse\n    githubLogin(code: String!, state: String!): QueryLoginResponse\n    decodeTest: QueryLoginResponse\n    checkAlias(alias: String!): QueryYesNoResponse\n    checkEmail(email: String!): QueryYesNoResponse\n  }\n\n  type AddCommentResponse {\n    message: String\n    success: Boolean!\n    commentId: String\n    content: String\n  }\n\n  type AddPostResponse {\n    message: String\n    success: Boolean!\n  }\n\n  type UpdatePostResponse {\n    message: String\n    success: Boolean!\n  }\n\n  type RemovePostResponse {\n    message: String\n    success: Boolean!\n  }\n\n  type AddUserResponse {\n    message: String\n    success: Boolean!\n    accessToken: String\n    refreshToken: String\n  }\n\n  type AddImageResponse {\n    message: String\n    success: Boolean!\n    imageId: String\n  }\n\n  type UploadResponse {\n    message: String\n    success: Boolean!\n  }\n\n  type RefreshTokenResponse {\n    message: String\n    success: Boolean!\n    refreshToken: String\n    accessToken: String\n  }\n\n  type TestResponse {\n    message: String\n    success: Boolean!\n    result: String\n  }\n\n  input InputComment {\n    linkedPostTitle: String!\n    content: String!\n    isReply: Boolean\n    replyToCommentId: String\n  }\n\n  input InputGeneralPost {\n    title: String!\n    content: String!\n    thumbnailId: String\n    summary: String\n    publishedAt: Date\n    deprecatedAt: Date\n    topics: String\n    isPrivate: Boolean\n  }\n\n  input InputUserRegistration {\n    idType: String!\n    openId: String!\n    alias: String!\n    email: String!\n    terms: Boolean!\n    subscribeEmail: Boolean!\n  }\n\n  input InputImageInfo {\n    alias: String!\n    fileType: String!\n    url: String!\n    hasInfo: Boolean!\n    size: String\n    width: String\n    height: String\n    color: String\n    tags: String\n    raw: String\n    full: String\n    regular: String\n    small: String\n    thumb: String\n    copyright: String\n    copyrightLink: String\n  }\n\n  type Mutation {\n    testPosting(post: InputGeneralPost!): TestResponse\n    addComment(comment: InputComment!): AddCommentResponse\n    addGeneralPost(post: InputGeneralPost!): AddPostResponse\n    updateGeneralPost(post: InputGeneralPost!): UpdatePostResponse\n    removeGeneralPost(title: String!): RemovePostResponse\n    registerUser(user: InputUserRegistration!): AddUserResponse\n    refreshToken: RefreshTokenResponse\n    # addUser(user: InputUser): User\n    registerImage(fileInfo: InputImageInfo!): AddImageResponse\n    testS3(file: Upload): UploadResponse\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var typeDefs = (0, _apolloServerExpress.gql)(_templateObject());
var _default = typeDefs;
exports["default"] = _default;